"""initial_migration

Revision ID: bfd57b00c54e
Revises: 
Create Date: 2025-09-24 20:11:53.571578

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'bfd57b00c54e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('activities',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('type', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('activity_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('agents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mbox', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('mbox')
    )
    op.create_table('beneficiaries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clusters',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('courses',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('scorm_version', sa.String(), nullable=True),
    sa.Column('package_path', sa.String(), nullable=False),
    sa.Column('manifest_path', sa.String(), nullable=False),
    sa.Column('manifest_identifier', sa.String(), nullable=True),
    sa.Column('manifest_title', sa.String(), nullable=True),
    sa.Column('package_id', sa.String(), nullable=False),
    sa.Column('launch_url', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('location_specifics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('major_scheduled_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('menu_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('url', sa.String(length=200), nullable=False),
    sa.Column('icon', sa.String(length=50), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('order_index', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['menu_items.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nature_of_works',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('permissible_works',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ridges',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=True)

    op.create_table('slopes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('statements',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('actor_mbox', sa.String(length=255), nullable=True),
    sa.Column('actor_name', sa.String(length=255), nullable=True),
    sa.Column('verb_id', sa.String(length=255), nullable=False),
    sa.Column('verb_display', sa.String(length=255), nullable=True),
    sa.Column('object_id', sa.String(length=255), nullable=False),
    sa.Column('object_definition', sa.Text(), nullable=True),
    sa.Column('result_completion', sa.Boolean(), nullable=True),
    sa.Column('result_success', sa.Boolean(), nullable=True),
    sa.Column('result_score_raw', sa.Float(), nullable=True),
    sa.Column('result_score_min', sa.Float(), nullable=True),
    sa.Column('result_score_max', sa.Float(), nullable=True),
    sa.Column('result_score_scaled', sa.Float(), nullable=True),
    sa.Column('context_instructor', sa.String(length=255), nullable=True),
    sa.Column('context_team', sa.String(length=255), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('stored', sa.DateTime(), nullable=True),
    sa.Column('authority', sa.String(length=255), nullable=True),
    sa.Column('version', sa.String(length=10), nullable=True),
    sa.Column('voided', sa.Boolean(), nullable=True),
    sa.Column('raw_statement', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('states',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('short_name', sa.String(length=128), nullable=True),
    sa.Column('uuid', sa.String(length=36), nullable=True),
    sa.Column('nrega_id', sa.String(length=4), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('states', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_states_uuid'), ['uuid'], unique=True)

    op.create_table('visit_count',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('count', sa.BigInteger(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('water_works',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('work_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('activities_list',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('activity_type', sa.Integer(), nullable=True),
    sa.Column('beneficiary_type', sa.Integer(), nullable=True),
    sa.Column('cluster_type', sa.Integer(), nullable=True),
    sa.Column('major_scheduled_category', sa.Integer(), nullable=True),
    sa.Column('category', sa.Integer(), nullable=True),
    sa.Column('nature_of_work', sa.Integer(), nullable=True),
    sa.Column('permissible_work', sa.Integer(), nullable=True),
    sa.Column('water_work', sa.Integer(), nullable=True),
    sa.Column('work_type', sa.Integer(), nullable=True),
    sa.Column('slope', sa.Integer(), nullable=True),
    sa.Column('ridge', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['activity_type'], ['activity_types.id'], ),
    sa.ForeignKeyConstraint(['beneficiary_type'], ['beneficiaries.id'], ),
    sa.ForeignKeyConstraint(['category'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['cluster_type'], ['clusters.id'], ),
    sa.ForeignKeyConstraint(['major_scheduled_category'], ['major_scheduled_categories.id'], ),
    sa.ForeignKeyConstraint(['nature_of_work'], ['nature_of_works.id'], ),
    sa.ForeignKeyConstraint(['permissible_work'], ['permissible_works.id'], ),
    sa.ForeignKeyConstraint(['ridge'], ['ridges.id'], ),
    sa.ForeignKeyConstraint(['slope'], ['slopes.id'], ),
    sa.ForeignKeyConstraint(['water_work'], ['water_works.id'], ),
    sa.ForeignKeyConstraint(['work_type'], ['work_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('districts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('short_name', sa.String(length=128), nullable=True),
    sa.Column('uuid', sa.String(length=36), nullable=True),
    sa.Column('nrega_id', sa.String(length=4), nullable=True),
    sa.Column('state_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['state_id'], ['states.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('districts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_districts_uuid'), ['uuid'], unique=True)

    op.create_table('menu_in_roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('menu_id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['menu_id'], ['menu_items.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('role_id', 'menu_id', name='unique_role_menu')
    )
    op.create_table('blocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('short_name', sa.String(length=128), nullable=True),
    sa.Column('uuid', sa.String(length=36), nullable=True),
    sa.Column('nrega_id', sa.String(length=8), nullable=True),
    sa.Column('state_id', sa.Integer(), nullable=False),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.ForeignKeyConstraint(['state_id'], ['states.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('blocks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_blocks_uuid'), ['uuid'], unique=True)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('email', sa.String(length=128), nullable=True),
    sa.Column('password', sa.String(length=128), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('registered_on', sa.DateTime(), nullable=True),
    sa.Column('uuid', sa.String(length=36), nullable=True),
    sa.Column('password_reset_expiry', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reset_token', sa.String(), nullable=True),
    sa.Column('totp_secret', sa.String(length=64), nullable=True),
    sa.Column('state_id', sa.Integer(), nullable=False),
    sa.Column('district_id', sa.Integer(), nullable=False),
    sa.Column('block_id', sa.Integer(), nullable=False),
    sa.Column('supervisor_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.id'], ),
    sa.ForeignKeyConstraint(['district_id'], ['districts.id'], ),
    sa.ForeignKeyConstraint(['state_id'], ['states.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_reset_token'), ['reset_token'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_totp_secret'), ['totp_secret'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_uuid'), ['uuid'], unique=True)

    op.create_table('activity_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('enrollments',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('enrolled_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scorm_data',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('cmi_key', sa.String(), nullable=False),
    sa.Column('cmi_value', sa.Text(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'course_id', 'cmi_key', name='uq_user_course_cmi')
    )
    with op.batch_alter_table('scorm_data', schema=None) as batch_op:
        batch_op.create_index('idx_user_course', ['user_id', 'course_id'], unique=False)

    op.create_table('user_courses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('certificate_issued', sa.Boolean(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users_in_roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_in_roles')
    op.drop_table('user_courses')
    with op.batch_alter_table('scorm_data', schema=None) as batch_op:
        batch_op.drop_index('idx_user_course')

    op.drop_table('scorm_data')
    op.drop_table('enrollments')
    op.drop_table('activity_logs')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_uuid'))
        batch_op.drop_index(batch_op.f('ix_users_totp_secret'))
        batch_op.drop_index(batch_op.f('ix_users_reset_token'))

    op.drop_table('users')
    with op.batch_alter_table('blocks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_blocks_uuid'))

    op.drop_table('blocks')
    op.drop_table('menu_in_roles')
    with op.batch_alter_table('districts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_districts_uuid'))

    op.drop_table('districts')
    op.drop_table('activities_list')
    op.drop_table('work_types')
    op.drop_table('water_works')
    op.drop_table('visit_count')
    with op.batch_alter_table('states', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_states_uuid'))

    op.drop_table('states')
    op.drop_table('statements')
    op.drop_table('slopes')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_name'))

    op.drop_table('roles')
    op.drop_table('ridges')
    op.drop_table('permissible_works')
    op.drop_table('nature_of_works')
    op.drop_table('menu_items')
    op.drop_table('major_scheduled_categories')
    op.drop_table('location_specifics')
    op.drop_table('courses')
    op.drop_table('clusters')
    op.drop_table('categories')
    op.drop_table('beneficiaries')
    op.drop_table('agents')
    op.drop_table('activity_types')
    op.drop_table('activities')
    # ### end Alembic commands ###
